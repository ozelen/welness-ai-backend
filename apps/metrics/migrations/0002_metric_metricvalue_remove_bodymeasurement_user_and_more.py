# Generated by Django 5.2.4 on 2025-08-17 12:05

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('metrics', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Unique name for the metric (e.g., 'Weight', 'Blood Glucose')", max_length=255, unique=True)),
                ('type', models.CharField(choices=[('body_measurement', 'Body Measurement'), ('lab_result', 'Laboratory Result'), ('vital_sign', 'Vital Sign'), ('fitness', 'Fitness Metric'), ('nutrition', 'Nutrition Metric'), ('calculated', 'Calculated Metric'), ('custom', 'Custom Metric')], help_text='Category of the metric', max_length=20)),
                ('unit', models.CharField(help_text='Unit of measurement (e.g., kg, cm, mg/dL, pmol/L)', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Description of what this metric measures')),
                ('is_custom', models.BooleanField(default=False, help_text='Whether this is a user-created custom metric')),
                ('is_public', models.BooleanField(default=True, help_text='Whether this metric is available to all users')),
                ('min_value', models.FloatField(blank=True, help_text='Minimum acceptable value', null=True)),
                ('max_value', models.FloatField(blank=True, help_text='Maximum acceptable value', null=True)),
                ('reference_range', models.CharField(blank=True, help_text='Normal range (e.g., 70-100)', max_length=100)),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier', max_length=50)),
                ('color', models.CharField(blank=True, help_text='Hex color code', max_length=7)),
                ('is_calculated', models.BooleanField(default=False, help_text='Whether this metric is calculated from other metrics')),
                ('calculation_formula', models.TextField(blank=True, help_text='Formula or description of how this metric is calculated')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this custom metric', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MetricValue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.FloatField(help_text='The measured value')),
                ('measurement_type', models.CharField(choices=[('baseline', 'Baseline'), ('target', 'Target'), ('log', 'Log'), ('goal', 'Goal'), ('calculated', 'Calculated')], default='log', max_length=20)),
                ('status', models.CharField(choices=[('normal', 'Normal'), ('high', 'High'), ('low', 'Low'), ('critical', 'Critical'), ('pending', 'Pending')], default='normal', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('source', models.CharField(blank=True, help_text="Source of measurement (e.g., 'Home Scale', 'Lab Corp')", max_length=100)),
                ('calculation_inputs', models.JSONField(blank=True, help_text='Input values used for calculation', null=True)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='metrics.metric')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metric_values', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.RemoveField(
            model_name='bodymeasurement',
            name='user',
        ),
        migrations.RemoveField(
            model_name='labresult',
            name='user',
        ),
        migrations.DeleteModel(
            name='MetricCategory',
        ),
        migrations.RemoveField(
            model_name='healthcalculator',
            name='bmi',
        ),
        migrations.RemoveField(
            model_name='healthcalculator',
            name='bmr_kcal',
        ),
        migrations.RemoveField(
            model_name='healthcalculator',
            name='body_fat_mass_kg',
        ),
        migrations.RemoveField(
            model_name='healthcalculator',
            name='lbm_kg',
        ),
        migrations.RemoveField(
            model_name='healthcalculator',
            name='tdee_kcal',
        ),
        migrations.DeleteModel(
            name='BodyMeasurement',
        ),
        migrations.DeleteModel(
            name='LabResult',
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['type', 'is_active'], name='metrics_met_type_3a58f0_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['is_custom', 'created_by'], name='metrics_met_is_cust_097a70_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['is_calculated'], name='metrics_met_is_calc_fd44d2_idx'),
        ),
        migrations.AddIndex(
            model_name='metricvalue',
            index=models.Index(fields=['user', 'metric', 'timestamp'], name='metrics_met_user_id_b02f0d_idx'),
        ),
        migrations.AddIndex(
            model_name='metricvalue',
            index=models.Index(fields=['metric', 'timestamp'], name='metrics_met_metric__255e13_idx'),
        ),
        migrations.AddIndex(
            model_name='metricvalue',
            index=models.Index(fields=['measurement_type'], name='metrics_met_measure_c2fd21_idx'),
        ),
    ]
